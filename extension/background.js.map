{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/errors/index.ts","webpack:///./src/background.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","2","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","BaseError","Error","message","code","context","super","this","constructor","timestamp","Date","now","captureStackTrace","stack","UNKNOWN_ERROR","normalizeError","error","isAppError","originalError","String","logger","autoStakerService","storageService","messagingService","state","isReady","config","stakerIntervalId","isProcessing","lastError","retryCount","maxRetries","async","initialize","info","warn","loadConfiguration","chrome","storage","onChanged","addListener","changes","areaName","newConfig","newValue","oldConfig","oldValue","stopAutoStaker","startAutoStaker","onMessage","debug","type","AUTOSTAKER_ON","handleStartAutoStaker","AUTOSTAKER_OFF","handleStopAutoStaker","sendErrorMessage","runtime","isStakerActive","fatal","runStakerProcess","intervalMs","checkIntervalMinutes","setInterval","clearInterval","stop","rewardsBefore","getRewardsToClaim","process","rewardsAfter","rewardsToClaim","totalValueUst","UPDATE_REWARDS","payload","sendMessage","sendRewardsUpdate","getTotalValueUst","updateRuntimeState","lastCheckTime","nextCheckTime","details","ERROR","updates","currentRuntime","newRuntime","set","onStartup","console","log","onInstalled","reason","defaultConfig","seedPhrase","targetAsset","mETH","contractExecDelaySeconds","mnemonicIndex","coinType","gasPrice","lcdUrl","network","MAINNET"],"mappings":"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","file":"background.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t2: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([510,1,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","/**\n * Custom Error Classes\n * Provides structured error handling throughout the application\n */\n\nimport { ERROR_CODES } from '../constants';\n\n/**\n * Base error class for all application errors\n */\nexport abstract class BaseError extends Error {\n  public readonly code: string;\n  public readonly timestamp: number;\n  public readonly context?: Record<string, unknown>;\n\n  constructor(message: string, code: string, context?: Record<string, unknown>) {\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.timestamp = Date.now();\n    this.context = context;\n\n    // Maintains proper stack trace for where our error was thrown\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  /**\n   * Convert error to JSON-serializable object\n   */\n  toJSON(): Record<string, unknown> {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      timestamp: this.timestamp,\n      context: this.context,\n      stack: this.stack,\n    };\n  }\n}\n\n/**\n * Configuration error\n */\nexport class ConfigurationError extends BaseError {\n  constructor(message: string, context?: Record<string, unknown>) {\n    super(message, ERROR_CODES.INVALID_CONFIG, context);\n  }\n}\n\n/**\n * Validation error\n */\nexport class ValidationError extends BaseError {\n  public readonly validationErrors: string[];\n\n  constructor(message: string, validationErrors: string[], context?: Record<string, unknown>) {\n    super(message, ERROR_CODES.INVALID_CONFIG, context);\n    this.validationErrors = validationErrors;\n  }\n}\n\n/**\n * Network error\n */\nexport class NetworkError extends BaseError {\n  public readonly statusCode?: number;\n  public readonly response?: unknown;\n\n  constructor(\n    message: string,\n    statusCode?: number,\n    response?: unknown,\n    context?: Record<string, unknown>\n  ) {\n    super(message, ERROR_CODES.NETWORK_ERROR, context);\n    this.statusCode = statusCode;\n    this.response = response;\n  }\n}\n\n/**\n * Transaction error\n */\nexport class TransactionError extends BaseError {\n  public readonly txHash?: string;\n  public readonly rawLog?: string;\n\n  constructor(\n    message: string,\n    txHash?: string,\n    rawLog?: string,\n    context?: Record<string, unknown>\n  ) {\n    super(message, ERROR_CODES.TX_FAILED, context);\n    this.txHash = txHash;\n    this.rawLog = rawLog;\n  }\n}\n\n/**\n * Staking process error\n */\nexport class StakingError extends BaseError {\n  constructor(message: string, context?: Record<string, unknown>) {\n    super(message, ERROR_CODES.STAKER_PROCESS_ERROR, context);\n  }\n}\n\n/**\n * Storage error\n */\nexport class StorageError extends BaseError {\n  constructor(message: string, context?: Record<string, unknown>) {\n    super(message, ERROR_CODES.UNKNOWN_ERROR, context);\n  }\n}\n\n/**\n * Check if an error is one of our custom errors\n */\nexport function isAppError(error: unknown): error is BaseError {\n  return error instanceof BaseError;\n}\n\n/**\n * Generic application error\n */\nexport class ApplicationError extends BaseError {\n  constructor(message: string, code: string = ERROR_CODES.UNKNOWN_ERROR, context?: Record<string, unknown>) {\n    super(message, code, context);\n  }\n}\n\n/**\n * Convert any error to our error format\n */\nexport function normalizeError(error: unknown): BaseError {\n  if (isAppError(error)) {\n    return error;\n  }\n\n  if (error instanceof Error) {\n    return new ApplicationError(error.message, ERROR_CODES.UNKNOWN_ERROR, {\n      originalError: error.name,\n      stack: error.stack,\n    });\n  }\n\n  return new ApplicationError(\n    String(error),\n    ERROR_CODES.UNKNOWN_ERROR,\n    { originalError: error }\n  );\n} ","/**\n * Background Script\n * Manages the autostaker service in the Chrome extension background\n */\n\nimport { \n  AutoStakerService, \n  StorageService, \n  getMessagingService, \n  createLogger \n} from './services';\nimport { \n  AutostakerConfig, \n  MessageType, \n  ChromeMessage, \n  RewardsUpdateMessage,\n  ErrorMessage,\n  Network,\n  TargetAsset\n} from './types';\nimport { STORAGE_KEYS } from './constants';\nimport { normalizeError } from './errors';\n\n// Initialize logger\nconst logger = createLogger('Background');\n\n// Service instances\nconst autoStakerService = new AutoStakerService();\nconst storageService = new StorageService('local');\nconst messagingService = getMessagingService();\n\n// Background state\ninterface BackgroundState {\n  isReady: boolean;\n  config: AutostakerConfig | null;\n  stakerIntervalId: number | null;\n  isProcessing: boolean;\n  lastError: Error | null;\n  retryCount: number;\n  maxRetries: number;\n}\n\nconst state: BackgroundState = {\n  isReady: false,\n  config: null,\n  stakerIntervalId: null,\n  isProcessing: false,\n  lastError: null,\n  retryCount: 0,\n  maxRetries: 3\n};\n\n/**\n * Initialize background script\n */\nasync function initialize(): Promise<void> {\n  try {\n    logger.info('Initializing background script');\n    \n    // Load saved configuration\n    await loadConfiguration();\n    \n    // Setup listeners\n    setupStorageListener();\n    setupMessageListener();\n    \n    // Mark as ready\n    state.isReady = true;\n    logger.info('Background script initialized successfully');\n    \n    // Check if autostaker should be running\n    const runtime = await storageService.get<{ isStakerActive: boolean }>(STORAGE_KEYS.runtime);\n    if (runtime?.isStakerActive && state.config) {\n      logger.info('Resuming autostaker from previous session');\n      await startAutoStaker();\n    }\n  } catch (error) {\n    logger.fatal('Failed to initialize background script', error);\n    state.lastError = normalizeError(error);\n  }\n}\n\n/**\n * Load configuration from storage\n */\nasync function loadConfiguration(): Promise<void> {\n  try {\n    const config = await storageService.get<AutostakerConfig>(STORAGE_KEYS.config);\n    \n    if (config) {\n      state.config = config;\n      logger.info('Configuration loaded from storage');\n    } else {\n      logger.warn('No configuration found in storage, using default');\n    }\n  } catch (error) {\n    logger.error('Failed to load configuration from storage', error);\n    throw error;\n  }\n}\n\n/**\n * Setup storage change listener\n */\nfunction setupStorageListener(): void {\n  chrome.storage.onChanged.addListener((changes, areaName) => {\n    if (areaName !== 'local') return;\n    \n    // Handle config changes\n    if (changes[STORAGE_KEYS.config]) {\n      const newConfig = changes[STORAGE_KEYS.config].newValue as AutostakerConfig;\n      const oldConfig = changes[STORAGE_KEYS.config].oldValue as AutostakerConfig;\n      \n      // Update local config\n      state.config = newConfig;\n      \n      // Restart autostaker if config changed while active\n      if (state.stakerIntervalId !== null && oldConfig && newConfig) {\n        logger.info('Configuration changed, restarting autostaker...');\n        stopAutoStaker();\n        startAutoStaker();\n      }\n    }\n  });\n}\n\n/**\n * Setup message listener\n */\nfunction setupMessageListener(): void {\n  messagingService.onMessage(async (message: ChromeMessage) => {\n    logger.debug(`Received message: ${message.type}`);\n    \n    try {\n      switch (message.type) {\n        case MessageType.AUTOSTAKER_ON:\n          await handleStartAutoStaker();\n          break;\n          \n        case MessageType.AUTOSTAKER_OFF:\n          await handleStopAutoStaker();\n          break;\n          \n        default:\n          logger.warn(`Unknown message type: ${message.type}`);\n      }\n    } catch (error) {\n      logger.error('Error handling message', error);\n      sendErrorMessage(error as Error);\n    }\n  });\n}\n\n/**\n * Handle start autostaker message\n */\nasync function handleStartAutoStaker(): Promise<void> {\n  if (!state.config) {\n    throw new Error('No configuration available');\n  }\n  \n  if (state.stakerIntervalId !== null) {\n    logger.info('Autostaker already running');\n    return;\n  }\n  \n  await startAutoStaker();\n}\n\n/**\n * Handle stop autostaker message\n */\nasync function handleStopAutoStaker(): Promise<void> {\n  if (state.stakerIntervalId === null) {\n    logger.info('Autostaker not running');\n    return;\n  }\n  \n  stopAutoStaker();\n}\n\n/**\n * Start the autostaker process\n */\nasync function startAutoStaker(): Promise<void> {\n  if (!state.config) {\n    throw new Error('Cannot start autostaker without configuration');\n  }\n  \n  try {\n    logger.info('Starting autostaker...');\n    \n    // Initialize the autostaker service\n    await autoStakerService.initialize(state.config);\n    \n    // Run immediately\n    await runStakerProcess();\n    \n    // Schedule periodic runs\n    const intervalMs = state.config.checkIntervalMinutes * 60 * 1000;\n    state.stakerIntervalId = setInterval(runStakerProcess, intervalMs) as unknown as number;\n    \n    logger.info(`Autostaker started (interval: ${state.config.checkIntervalMinutes} minutes)`);\n  } catch (error) {\n    logger.error('Failed to start autostaker', error);\n    state.lastError = normalizeError(error);\n    sendErrorMessage(error as Error);\n    throw error;\n  }\n}\n\n/**\n * Stop the autostaker process\n */\nfunction stopAutoStaker(): void {\n  logger.info('Stopping autostaker...');\n  \n  if (state.stakerIntervalId !== null) {\n    clearInterval(state.stakerIntervalId);\n    state.stakerIntervalId = null;\n  }\n  \n  autoStakerService.stop();\n  state.isProcessing = false;\n  \n  logger.info('Autostaker stopped');\n}\n\n/**\n * Run the staker process\n */\nasync function runStakerProcess(): Promise<void> {\n  if (state.isProcessing) {\n    logger.info('Staker process already running, skipping...');\n    return;\n  }\n  \n  state.isProcessing = true;\n  \n  try {\n    logger.info('Running staker process...');\n    \n    // Get current rewards before processing\n    const rewardsBefore = await autoStakerService.getRewardsToClaim();\n    \n    // Process staking\n    await autoStakerService.process();\n    \n    // Get rewards after processing\n    const rewardsAfter = await autoStakerService.getRewardsToClaim();\n    const totalValue = await autoStakerService.getTotalValueUst();\n    \n    // Send update to popup\n    sendRewardsUpdate(rewardsAfter, totalValue);\n    \n    // Update runtime state in storage\n    await updateRuntimeState({\n      lastCheckTime: Date.now(),\n      nextCheckTime: Date.now() + (state.config!.checkIntervalMinutes * 60 * 1000),\n      error: null\n    });\n    \n    logger.info('Staker process completed successfully');\n    logger.info(`Rewards: ${rewardsBefore} -> ${rewardsAfter}`);\n  } catch (error) {\n    logger.error('Staker process failed', error);\n    state.lastError = normalizeError(error);\n    \n    // Send error to popup\n    sendErrorMessage(error as Error);\n    \n    // Update runtime state with error\n    await updateRuntimeState({\n      error: {\n        code: 'STAKER_PROCESS_ERROR',\n        message: (error as Error).message,\n        timestamp: Date.now(),\n        details: error\n      }\n    });\n  } finally {\n    state.isProcessing = false;\n  }\n}\n\n/**\n * Send rewards update message\n */\nfunction sendRewardsUpdate(rewardsToClaim: number, totalValueUst: number): void {\n  const message: RewardsUpdateMessage = {\n    type: MessageType.UPDATE_REWARDS,\n    payload: {\n      rewardsToClaim,\n      totalValueUst\n    }\n  };\n  \n  messagingService.sendMessage(message);\n}\n\n/**\n * Send error message\n */\nfunction sendErrorMessage(error: Error): void {\n  const message: ErrorMessage = {\n    type: MessageType.ERROR,\n    payload: {\n      code: 'BACKGROUND_ERROR',\n      message: error.message,\n      timestamp: Date.now(),\n      details: error\n    }\n  };\n  \n  messagingService.sendMessage(message);\n}\n\n/**\n * Update runtime state in storage\n */\nasync function updateRuntimeState(updates: Record<string, unknown>): Promise<void> {\n  try {\n    const currentRuntime = await storageService.get<Record<string, unknown>>(STORAGE_KEYS.runtime) || {};\n    const newRuntime = { ...currentRuntime, ...updates };\n    await storageService.set(STORAGE_KEYS.runtime, newRuntime);\n  } catch (error) {\n    logger.error('Failed to update runtime state', error);\n  }\n}\n\n/**\n * Handle extension startup\n */\nchrome.runtime.onStartup.addListener(() => {\n  console.log('[Background] Extension started');\n  initialize();\n});\n\n/**\n * Handle extension installation\n */\nchrome.runtime.onInstalled.addListener((details) => {\n  console.log('[Background] Extension installed:', details.reason);\n  \n  if (details.reason === 'install') {\n    // Set default configuration for new installation\n    const defaultConfig: AutostakerConfig = {\n      seedPhrase: '',\n      targetAsset: TargetAsset.mETH,\n      checkIntervalMinutes: 60,\n      contractExecDelaySeconds: 15,\n      mnemonicIndex: 0,\n      coinType: 330,\n      gasPrice: 0.30,\n      lcdUrl: 'https://lcd.terra.dev',\n      network: Network.MAINNET\n    };\n    \n    storageService.set(STORAGE_KEYS.config, defaultConfig);\n  }\n  \n  initialize();\n});\n\n// Initialize on script load\ninitialize();\n"],"sourceRoot":""}